					==============================================================
								Operations on str data
					==============================================================
=>On str Data, we can perform Two Types of Operations. Theya re

						1. Indexing Operations
						2. Slicing Operations
---------------------------------------------------------------------------------------------------------------------------------------------------------------
1. Indexing Operations
---------------------------------------------------------------------------------------------------------------------------------------------------------------
=>The Process of Getting Single Value from Given Str Object by passing Index is called Indexing Operation.
=>Syntax:		strobj[Index]
=>Here Index can be either  +VE Index OR -VE Index.
=>If we enter Valid +VE Index OR -VE Index  then we get Corresponding Indexed Value.
=>If we enter InValid +VE Index OR -VE Index  then we get IndexError.
------------------------------------
Examples
------------------------------------
>>> s="PYTHON"
>>> s[0]-----------------------------'P'
>>> s[1]-----------------------------'Y'
>>> s[5]-----------------------------'N'
>>> s[3]-----------------------------'H'
>>> s[2]-----------------------------'T'
>>> s[4]------------------------------'O'
>>> s[10]----------------------------IndexError: string index out of range
----------------------------------------------
>>> s="PYTHON"
>>> print(s)-------------------------PYTHON
>>> s[-1]----------------------------'N'
>>> s[-2]----------------------------'O'
>>> s[-6]----------------------------'P'
>>> s[-4]----------------------------'T'
>>> s[-5]----------------------------'Y'
>>> s[-3]----------------------------'H'
>>> s[-13]---------------------------IndexError: string index out of range
---------------------------------
NOTE:  len() is pre-defined Function, used for Finding length of any Iterable Object (Object Contains More than One Value)
----------
>>> s="PYTHON"
>>> print(s,type(s))----------------PYTHON <class 'str'>
>>> s[len(s)]------------------------IndexError: string index out of range
>>> s[-len(s)]-----------------------'P'
>>> s[-1]-----------------------------'N'
>>> s[0]-----------------------------'P'
>>> s[len(s)-1]---------------------'N'
--------------------------------------------
Special Points
--------------------------------------------
>>> "HYDERABAD"[0]
'H'
>>> "HYDERABAD"[-1]
'D'
>>> "HYDERABAD"[len("HYDERABAD")-1]
'D'
>>> "HYDERABAD"[-len("HYDERABAD")]
'H'
>>> "AMAZON"[-len("DELHI")]
'M'
>>> "AMAZON"[0b101]
'N'
>>> a=0x1
>>> print(a)
1
>>> "AMAZON"[0x1]
'M'
>>> "AMAZON"[-False]
'A'
>>> "AMAZON"[-True]
'N'
>>> "AMAZON"[True]
'M'
---------------------------------------------------------------------------------------------------------------------------------------------------------------
2. Slicing Operations--Very Imp
---------------------------------------------------------------------------------------------------------------------------------------------------------------
=>The Process of obtaining Range of Values OR Sub String from Given Str Object is Called Slicing
=>The we can apply Slicing Operation with 5 Syntaxes
---------------------------------------------------------------------------------------------------------------------
Syntax1:   strobj[BEGIN:END]
---------------------------------------------------------------------------------------------------------------------
=>This Syntax Gives Range of Values OR Sub String  from BEGIN Index to END-1 Index provided BEGIN<END otherwise 
    we get ' ' or Space as Result.
=>here BEGIN and END Indices can be either +VE or -VE
---------------------------
Case-1:  +VE BEGIN   +VE END  provided   BEGIN <END
---------------------------
>>> print(s,type(s))-----------------PYTHON <class 'str'>
>>> s[0:5]-------------------------'PYTHO'
>>> s[2:5]-------------------------'THO'
>>> s[4:2]------------------------''
>>> s[2:4]------------------------'TH'
>>> s[3:6]------------------------'HON'
>>> s[1:4]------------------------'YTH'
>>> s[3:5]-------------------------'HO'
>>> s[0:3]-------------------------'PYT'
>>> s[2:3]-------------------------'T'
>>> s[2:2]-------------------------''
---------------------------
Case-2:   -VE BEGIN   -VE END    provided   BEGIN < END
---------------------------
>>> s="PYTHON"
>>> print(s)-------------------------PYTHON
>>> s[-6:-2]------------------------'PYTH'
>>> s[-5:-1]------------------------'YTHO'
>>> s[-3:-1]------------------------'HO'
>>> s[-1:-3]------------------------''
>>> s[-3:-2]------------------------'H'
>>> s[-6:-4]-------------------------'PY'
>>> s[-6:-1]--------------------------'PYTHO'
---------------------------
Case-3:    +VE BEGIN   -VE END  (Ingoring this This Cond   BEGIN <END)
---------------------------
>>> s="PYTHON"
>>> print(s)---------------------PYTHON
>>> s[1:-1]----------------------'YTHO'
>>> s[2:-4]----------------------''
>>> s[2:-1]---------------------'THO'
>>> s[0:-2]---------------------'PYTH'
>>> s[1:-3]---------------------'YT'
>>> s[3:-1]---------------------'HO'
>>> s[0:-5]---------------------'P'
>>> s[0:-6]---------------------''
>>> s[2:-2]--------------------'TH'
---------------------------
Case-4:  -VE BEGIN   +VE END  (Ingoring this This Cond   BEGIN <END)
---------------------------
>>> s="PYTHON"
>>> print(s)---------------------------PYTHON
>>> s[-5:5]----------------------------'YTHO'
>>> s[-6:3]-----------------------------'PYT'
>>> s[-5:6]-----------------------------'YTHON'
>>> s[-3:0]-----------------------------''
>>> s[-4:6]-----------------------------'THON'
>>> s[-6:0]-----------------------------''
>>> s[-6:1]------------------------------'P'
>>> s[-6:6]------------------------------'PYTHON'
---------------------------
Special Points: 
---------------------------
>>> s="PYTHON"
>>> print(s)
PYTHON
>>> s[0:6]
'PYTHON'
>>> s[0:20]
'PYTHON'
>>> s[2:200]
'THON'
>>> s[1:1000]
'YTHON'
>>> s[3:2000]
'HON'
>>> s[6:1000]
''
----------------------------
>>> s="PYTHON"
>>> print(s)
PYTHON
>>> s[-10:-4]
'PY'
>>> s[-1000:-1]
'PYTHO'
>>> s[-200:-5]
'P'
>>> s[-10:-6]
''
>>> s[-20:-2]
'PYTH'
-------------------------------
>>> s="PYTHON"
>>> s[-100:100]
'PYTHON'
>>> s[-10:5]
'PYTHO'
>>> s[-len(s):len(s)]
'PYTHON'
>>> s[-len(s)-10:len(s)+10]
'PYTHON'
>>> s[-100:-6]
''
---------------------------------------------------------------------------------------------------------------------
Syntax2:   strobj[BEGIN : ]
---------------------------------------------------------------------------------------------------------------------
=>In This Syntax, we are Specifying BEGIN Index and Not Specifying END Index.
=>If we don't Specify END Index then PVM takes END Index as len(strobj)
=>In Otherwords, we don't Specify END Index then PVM takes Range of Chars from BEGIN Index to last Character.		
----------------------------
Examples
----------------------------
>>> s="PYTHON"
>>> s[2:]----------------------'THON'
>>> s[0:]
'PYTHON'
>>> s[1:]
'YTHON'
>>> s[3:]
'HON'
>>> s[4:]
'ON'
>>> s[5:]
'N'
>>> s[6:]
''
>>> s[-6:]
'PYTHON'
>>> s[-4:]
'THON'
>>> s[-3:]
'HON'
>>> s[-2:]
'ON'
>>> s[-1:]
'N'
>>> s[-100:]
'PYTHON'
---------------------------------------------------------------------------------------------------------------------
Syntax3:   strobj[ : END]
---------------------------------------------------------------------------------------------------------------------
=>In This Syntax, we are Specifying END Index and Not Specifying  BEGIN Index.
=>If we don't Specify BEGIN Index then PVM takes BEGIN  Index as 0 or -len(strobj)
=>In Otherwords, we don't Specify BEGIN Index then PVM takes Range of Chars from First Char to END-1 Index .	
--------------------------
Examples
--------------------------
>>> s="PYTHON"
>>> print(s)
PYTHON
>>> s[:3]
'PYT'
>>> s[:6]
'PYTHON'
>>> s[:2]
'PY'
>>> s[:5]
'PYTHO'
>>> s[:4]
'PYTH'
>>> s[:-4]
'PY'
>>> s[:-1]
'PYTHO'
>>> s[:-3]
'PYT'
>>> s[:-5]
'P'
>>> s[:-50]
''
---------------------------------------------------------------------------------------------------------------------
Syntax4:   strobj[ : ]
---------------------------------------------------------------------------------------------------------------------
=>In This Syntax, we are  not Specifying  Both BEGIN Index and  END Index .
=>If we don't Specify Both BEGIN Index and  END Index then PVM Takes Range of chars from 0 to len(strobj)  OR -len(strobj) to -1.
=>In Otherwords,If we don't Specify Both BEGIN Index and  END Index then PVM Takes Range of chars from First Char to Last Character (Complete String Data).
-----------------------------
Examples
-----------------------------
>>> s="PYTHON"
>>> s[:]------------------------'PYTHON'
>>> s="PYTHON PROG"
>>> s[:]-----------------------'PYTHON PROG'
-----------------------------------------
NOTE: All the above Syntaxes Gets Range of Chars in FORWARD DIRECTION with Default Step +1 Only
---------------------------------------------------------------------------------------------------------------------
Syntax5:   strobj[BEGIN:END:STEP]---------------------Most Imp
---------------------------------------------------------------------------------------------------------------------
Rule-1:	Here BEGIN,END and Step Values can be either +Ve OR -Ve or Both
---------
Rule-2: If the Value of STEP is +VE then PVM Takes range of chars from BEGIN Index to  END-1 Index in FORWARD 
              Direction with Step Value  provided BEGIN<END Index Otherwise we get  ' ' OR Sapce as Result.
----------
Rule-3: If the Value of STEP is -VE then PVM Takes Range of Chars from BEGIN to END+1 Index in BACKWARD Direction ---------- with Step Values provided BEGIN > END Index Otherwise we get  ' ' OR Sapce as Result.
----------
Rule-4: In FORWARD Direction ,If we specify the END value as 0 then we get Space OR ' '  as  Result

Rule-5: In BACKWARD Direction ,If we specify the END value as -1 then we get Space OR ' '  as  Result

---------------------------------------------------------------------------------------------------------------------------------------------------------------
Examples--Rule-2	+Beg  +End +Step  Considering Begin<End
-----------------------------------------------------------
>>> s="PYTHON"
>>> s[0:6:2]
'PTO'
>>> s[1:6:3]
'YO'
>>> s[0::4]
'PO'
>>> s[3:6:2]
'HN'
>>> s[0:6:4]
'PO'
>>> s[3:6:1]
'HON'
>>> s[4:2:2]
''
----------------------------------------------------------
Examples--Rule-2	-Beg -End  +Step  Considering Begin<End
-----------------------------------------------------------
>>> s="PYTHON"
>>> s[-6:-1:3]
'PH'
>>> s[-5:-2:2]
'YH'
>>> s[-4:-1:1]
'THO'
>>> s[-1:-4:2]
''
>>> s[-5:-2:3]
'Y'
>>> s[-6:-1:4]
'PO'
----------------------------------------------------------
Examples--Rule-2	+Beg -End  +Step    Ignoring Begin<End
-----------------------------------------------------------
>>> s="PYTHON"
>>> s[1:-1:1]
'YTHO'
>>> s[1:-1:3]
'YO'
>>> s[2:-1:3]
'T'
>>> s[0:-1:3]
'PH'
>>> s[0:-2:2]
'PT'
>>> s[3:-3:2]
''
----------------------------------------------------------
Examples--Rule-2	-Beg   +End  +Step    Ignoring Begin<End
-----------------------------------------------------------
>>> s="PYTHON"
>>> s[-6:6:3]
'PH'
>>> s[-6:5:2]
'PTO'
>>> s[-5:5:3]
'YO'
>>> s[-5:5:2]
'YH'
>>> s[-2:5:2]
'O'
>>> s[-6:4:2]
'PT'
>>> s[-4:6:2]
'TO'
----------------------------------------------------------
Examples--Rule-3	+Beg   +End  -Step    Considering Begin>End
-----------------------------------------------------------
>>> s="PYTHON"
>>> s[5:0:-1]
'NOHTY'
>>> s[4:2:-2]
'O'
>>> s[4:1:-2]
'OT'
>>> s[5:0:-3]
'NT'
>>> s[3:0:-2]
'HY'
>>> s[6:0:-3]
'NT'
>>> s[100:0:-4]
'NY'
----------------------------------------------------------
Examples--Rule-3	-Beg   -End  -Step    Considering Begin>End
-----------------------------------------------------------
>>> s="PYTHON"
>>> s[-1:-7:-1]
'NOHTYP'
>>> s[-2:-6:-2]
'OT'
>>> s[-1:-6:-3]
'NT'
>>> s[-2:-7:-2]
'OTP'
> s[-5:-1:-3]
''
----------------------------------------------------------
Examples--Rule-3	+Beg   -End  -Step    Ignoring  Begin>End
-----------------------------------------------------------
>>> s="PYTHON"
>>> s[0:-1:-2]
''
>>> s[5:-6:-2]
'NHY'
>>> s[6:-7:-1]
'NOHTYP'
>>> s[6:-2:-1]
'N'
>>> s[5:-6:-4]
'NY'
>>> s[4:-7:-2]
'OTP'
----------------------------------------------------------
Examples--Rule-3	-Beg   +End  -Step    Ignoring  Begin>End
-----------------------------------------------------------
>>> s="PYTHON"
>>> s[-6:6:-1]
''
>>> s[-1:0:-2]
'NHY'
>>> s[-1:0:-1]
'NOHTY'
>>> s[-2:0:-3]
'OY'
>>> s[-3:1:-3]
'H'
-----------------------------------------------------------
Special Points
----------------------------------------------------------
>>> s="PYTHON"
>>> s[::]
'PYTHON'
>>> s[::-1]  #Extending Slicing--getting Reverse of the String.
'NOHTYP'
>>> s="Java"
>>> s[::-1]
'avaJ'
>>> s="HYDERABAD"
>>> s[::-1]
'DABAREDYH'
>>> s="LIRIL"
>>> s[::-1]==s[::]
True
>>> s="MADAM"
>>> s[::-1]==s[::]
True
>>> s="LEVEL"
>>> s[::-1]==s
True
>>> s="MALAYALAM"
>>> s[::-1]==s[:]
True
>>> s="RACECAR"
>>> s[::-1]==s[:]
True
>>> s="RADAR"
>>> s[::-1]==s[:]
True
>>> s="OYO"
>>> s[::-1]==s[:]
True
>>> s="1221"
>>> s[::-1]==s[:]
True
>>> s="12321"
>>> s[::-1]==s[:]
True
>>> s="1224"
>>> s[::-1]==s[:]
False
--------------------------------------------------------------------------
Exapmles ----Rule-4
--------------------------------------------------------------------------
>>> s="PYTHON"
>>> s[1:0:1]
''
>>> s[5:0:2]
''
>>> s[-6:0:3]
''
--------------------------------------------------------------------------
Exapmles ----Rule-4
--------------------------------------------------------------------------
>>> s="PYTHON"
>>> s[-6:-1:-1]
''
>>> s[-5:-1:-2]
''
>>> s[6:-1:-1]
''
>>> s[0:-1:-1]
''
>>> s[-1:-1:-1]
''
-----------------------------------------------------------------------------------------------------------------------------------------------
>>> s="PYTHON"
>>> s[5::-1]
'NOHTYP'
>>> s[4::-2]
'OTP'
>>> s[:2:-1]
'NOH'
>>> s[:2:]
'PY'
>>> s[:10:-2]
''
>>> s[:-5:-3]
'NT'
>>> s[:-60:-2]
'NHY'
>>>
--------------------------------------------------------------------------------------------------------------------------------------------------
